buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

plugins {
    id 'java'
    id 'maven-publish'
}
apply plugin: "com.jfrog.artifactory"

version = '3.98.4'

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
    from "LICENSE"
    from "README.md"
}

jar {
    from "LICENSE"
    from "README.md"

    manifest {
        attributes 'Main-Class': 'net.sourceforge.lame.mp3.Main'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
        groupId = 'net.sourceforge.lame'
        artifactId = 'java-lame'

        from components.java
        }
    }
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

artifactory {
  contextUrl = 'https://daberkow.jfrog.io/artifactory'   //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    contextUrl = 'https://daberkow.jfrog.io/artifactory'   //The base Artifactory URL for the publisher
    //A closure defining publishing information
    repository {
      repoKey = 'daberkow'   //The Artifactory repository key to publish to
      username = ARTIFACTORY_USERNAME          //The publisher user name
      password = ARTIFACTORY_PASSWORD       //The publisher password or API key
      ivy {
        //Optional section for configuring Ivy publication. Assumes Maven repo layout if not specified
        ivyLayout = '[organization]/[module]/[revision]/[type]s/ivy-[revision].xml'
        artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
        mavenCompatible = true //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
      }
    }
    defaults {
        //List of Gradle Publications (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
        //If you'd like to deploy the artifacts from all the publications defined in the Gradle script, you can set the 'ALL_PUBLICATIONS' string, instead of the publication names.
        publications ('ALL_PUBLICATIONS')
        //List of Gradle Configurations (names or objects) from which to collect the list of artifacts to be deployed to Artifactory. 
        publishConfigs('archives', 'published')
        // properties = ['qa.level': 'basic', 'q.os': 'win32, deb, osx']  //Optional map of properties to attach to all published artifacts
        /*
        The properties closure in the "defaults" task uses the following syntax:
        properties {
            publicationName 'group:module:version:classifier@type', key1:'value1', key2:'value2', ...
        }
        publicationName: A valid name for a publication of the project. You can use all to apply the properties to all publications.
        group:module:version:classifier@type: A filter that specifies the artifacts to which properties should be attached. 
        The filter may contain wildcards: * for all characters or ? for a single character.
        key:'value': A list of key/value properties that will be attached to to the published artifacts matching the filter. 
        */
        // properties {                                                   //Optional closure to attach properties to artifacts based on a list of artifact patterns per project publication
        //     foo '*:*:*:*@*', platform: 'linux', 'win64'                //The property platform=linux,win64 will be set on all artifacts in foo publication
        //     mavenJava 'org.jfrog:*:*:*@*', key1: 'val1'                //The property key1=val1 will be set on all artifacts part of the mavenJava publication and with group org.jfrog
        //     all 'org.jfrog:shared:1.?:*@*', key2: 'val2', key3: 'val3' //The properties key2 and key3 will be set on all published artifacts (all publications) with group:artifact:version 
        //                                                                //equal to org.jfrog:shared:1.?
        // }
        publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
        publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
        publishPom = true   //Publish generated POM files to Artifactory (true by default).
        publishIvy = true   //Publish generated Ivy descriptor files to Artifactory (true by default).
    }
  }
  // Redefine basic properties of the build info object
//   clientConfig.setIncludeEnvVars(true)
//   clientConfig.setEnvVarsExcludePatterns('*password*,*secret*')
//   clientConfig.setEnvVarsIncludePatterns('*not-secret*')
//   clientConfig.info.addEnvironmentProperty('test.adding.dynVar',new java.util.Date().toString())
//   clientConfig.info.setBuildName('new-strange-name')
//   clientConfig.info.setBuildNumber('' + new java.util.Random(System.currentTimeMillis()).nextInt(20000))
//   clientConfig.info.setProject('java-lame')
  clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
  clientConfig.setInsecureTls(false) // Set to true to skip TLS certificates verification (false by default).
}

// artifactoryPublish {
//     skip = false //Skip build info analysis and publishing (false by default)
//     contextUrl = 'https://daberkow.jfrog.io/artifactory'
//     // publications ('a','b','c')
//     // properties = ['qa.level': 'basic', 'q.os': 'win32, deb, osx']
//     // properties {
//     //     c '**:**:**:*@*', cProperty: 'only in c'
//     // }
//     clientConfig.publisher.repoKey = 'daberkow'
//     clientConfig.publisher.username = ARTIFACTORY_USERNAME
//     clientConfig.publisher.password = ARTIFACTORY_PASSWORD
 
//     // clientConfig.publisher.setExcludePatterns("*artifacts-to-exclude-1*,*artifacts-to-exclude-2*") // Comma-separated list of excluded patterns. Artifacts matched to one of the patterns will not be deployed.
//     // clientConfig.publisher.setFilterExcludedArtifactsFromBuild(true) // Set to true to avoid adding the filtered artifacts to the build-info.
 
//     // Minimum file size in KB for which the plugin performs checksum deploy optimization. Default: 10. Set to 0 to disable uploading files with checksum that already exists in Artifactory.
//     clientConfig.publisher.minChecksumDeploySizeKb = 10
// }
